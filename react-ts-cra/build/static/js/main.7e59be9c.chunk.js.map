{"version":3,"sources":["Hello.tsx","Album.tsx","AlbumDetails.tsx","AddAlbum.tsx","Nav.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Hello","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sub_message","default_msg","setState","react_default","a","createElement","message","className","onClick","updateSubMessage","bind","React","Component","Albums","renderAlbums","react","albums","map","album","NavLink","to","id","key","title","getAllAlbums","fetch","initialResponse","json","jsonResponse","splice","AlbumDetails","albumId","parseInt","match","params","goBack","assertThisInitialized","getAlbumDetails","endpointURL","history","renderAlbumDetails","AddAlbum","Nav","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","style","marginBottom","Hello_Hello","Nav_Nav","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAWqBA,cACnB,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAc,MACdC,YAAc,WAJQT,kFASxBG,KAAKO,SAAS,CACZF,YAAc,mBACdC,YAAc,6CAKhB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,UAAKV,KAAKJ,MAAMe,QAAhB,KAAX,KACAH,EAAAC,EAAAC,cAAA,0BAAkBV,KAAKI,MAAMC,aAC7BG,EAAAC,EAAAC,cAAA,UAAQE,UAAU,MAAMC,QAASb,KAAKc,iBAAiBC,KAAKf,OAA5D,0BACAQ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,cAASV,KAAKI,MAAME,cAC/BE,EAAAC,EAAAC,cAAA,qCAzByBM,IAAMC,4CCApBC,cACnB,SAAAA,EAAYtB,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACxBrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KAoBRuB,aAAe,kBACbC,EAAA,wBAEIvB,EAAKO,MAAMiB,OAAOC,IAAI,SAAAC,GACpB,OAAOH,EAAA,cAACI,EAAA,EAAD,CAASC,GAAI,WAAaF,EAAMG,GAAK,WAAYC,IAAKJ,EAAMG,IACjEN,EAAA,wBAAKG,EAAMK,YAxBnB/B,EAAKO,MAAQ,CACXiB,OAAS,IAHaxB,mFAQxBG,KAAK6B,4KAIsB,uDACCC,MADD,6DACvBC,kBACqBA,EAAgBC,cAArCC,SAEJjC,KAAKO,SAAS,CACZc,OAASY,EAAaC,OAAO,EAAE,yIAiBjC,OACEd,EAAA,yBACEA,EAAA,mCACCpB,KAAKmB,uBAtCsBH,qBCAfmB,cACnB,SAAAA,EAAYvC,GAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IACvBtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KAORwC,QAAUC,SAASxC,EAAKD,MAAM0C,MAAMC,OAAOb,IANzC7B,EAAKO,MAAQ,CACXmB,MAAQ,IAEV1B,EAAK2C,OAAS3C,EAAK2C,OAAOzB,KAAZjB,OAAA2C,EAAA,EAAA3C,QAAA2C,EAAA,EAAA3C,CAAAD,KALSA,mFAWvBG,KAAK0C,gBAAgB1C,KAAKoC,yFAGNV,oFAChBiB,EAAc,+CAAiDjB,WACvCI,MAAMa,iBAA9BZ,kBACqBA,EAAgBC,cAArCC,SACJjC,KAAKO,SAAS,CACZgB,MAAQU,wIAKVjC,KAAKJ,MAAMgD,QAAQJ,sDAInB,OACEpB,EAAA,yBACEA,EAAA,wBAAKpB,KAAKI,MAAMmB,MAAMK,OACtBR,EAAA,0DACAA,EAAA,wBAAQP,QAASb,KAAKwC,OAAQ5B,UAAU,OAAxC,0CAMJ,OAAOZ,KAAK6C,4BAvC0B7B,aCTrB8B,mLAEjB,OACE1B,EAAA,yBACEA,EAAA,kDAJ8BJ,aCCzB+B,EAAM,WACjB,OACE3B,EAAA,qBAAKR,UAAU,iDACbQ,EAAA,cAACI,EAAA,EAAD,CAASZ,UAAU,YAAYa,GAAG,KAAlC,YACAL,EAAA,wBAAQR,UAAU,iBAAiBoC,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpLjC,EAAA,sBAAMR,UAAU,yBAGlBQ,EAAA,qBAAKR,UAAU,2BAA2Bc,GAAG,0BAC3CN,EAAA,oBAAIR,UAAU,sBACZQ,EAAA,oBAAIR,UAAU,mBACZQ,EAAA,cAACI,EAAA,EAAD,CAASZ,UAAU,WAAWa,GAAG,WAAjC,iBCiBG6B,mLAnBX,OACE9C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAY2C,MAAO,CAACC,aAAe,KAChDhD,EAAAC,EAAAC,cAAA,mCAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAC+C,EAAD,CAAO9C,QAAQ,oBAEjBH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAW5C,IACvCV,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOE,KAAK,eAAeC,UAAWhB,IACtCtC,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOE,KAAK,sBAAsBC,UAAW3B,aAdrClB,aCEE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5B,MACvB,uECXN6B,IAASC,OACP5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e59be9c.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport interface Props{\n  message : string\n}\n\ninterface State {\n  sub_message : string,\n  default_msg : string\n}\n\nexport default class Hello extends React.Component <Props, State>{\n  constructor(props : Props){\n    super(props)\n    this.state = {\n      sub_message : \"Bye\",\n      default_msg : \"Working\"\n    }\n  }\n\n  private updateSubMessage(){\n    this.setState({\n      sub_message : \"GoodBye, For Now\",\n      default_msg : \"Updated\"\n    })\n  }\n\n  public render(){\n    return (\n      <div>\n        <h3> Hello <em>{this.props.message} </em> </h3>\n        <p> And, finally {this.state.sub_message}</p>\n        <button className='btn' onClick={this.updateSubMessage.bind(this)}> Change Ending Message</button>\n        <ul>\n          <li> Props Worked</li>\n          <li> State <strong>{this.state.default_msg}</strong></li>\n          <li> Routing Works</li>\n        </ul>\n      </div>\n    )\n  }\n}","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport interface Props {\n\n}\n\ninterface State {\n  albums : any []\n}\n\nexport default class Albums extends React.Component<Props, State>{\n  constructor(props : Props){\n    super(props)\n    this.state = {\n      albums : []\n    }\n  }\n  \n  componentDidMount(){\n    this.getAllAlbums()\n  }\n\n  async getAllAlbums(){\n    let endpointURL : string = 'https://jsonplaceholder.typicode.com/albums';\n    let initialResponse = await fetch(endpointURL);\n    let jsonResponse = await initialResponse.json();\n\n    this.setState({\n      albums : jsonResponse.splice(0,10)\n    })\n  }\n\n  renderAlbums = () => (\n    <ul>\n      {\n        this.state.albums.map(album => { \n          return <NavLink to={\"/albums/\" + album.id + \"/details\"} key={album.id}>\n            <li>{album.title}</li>\n            </NavLink>\n        })\n      }   \n    </ul>\n  )\n    \n  render(){\n    return (\n      <div>\n        <h3> Albums</h3>\n        {this.renderAlbums()}\n      </div>\n    \n    )\n  }\n\n}","import * as React from 'react';\n\nexport interface Props {\n  match : any,\n  history : any\n}\n\ninterface State {\n  album : any\n}\n\nexport default class AlbumDetails extends React.Component <Props, State>{\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      album : {}\n    }\n    this.goBack = this.goBack.bind(this);\n  }\n\n  albumId = parseInt(this.props.match.params.id)\n\n  componentDidMount(){\n    this.getAlbumDetails(this.albumId);\n  }\n\n  async getAlbumDetails(id: number){\n    let endpointURL = \"https://jsonplaceholder.typicode.com/albums/\" + id\n    let initialResponse = await fetch(endpointURL);\n    let jsonResponse = await initialResponse.json()\n    this.setState({\n      album : jsonResponse\n    })\n  }\n\n  goBack(){\n    this.props.history.goBack()\n  }\n\n  renderAlbumDetails(){\n    return (\n      <div>\n        <h3>{this.state.album.title}</h3>\n        <p>Stupid API returns nothing more</p>\n        <button onClick={this.goBack} className=\"btn\">Back</button>\n      </div>\n    )\n  }\n\n  render(){\n    return(this.renderAlbumDetails())\n  }\n}","import * as React from 'react';\n\nexport default class AddAlbum extends React.Component{\n  render(){\n    return(\n      <div>\n        <h3> Add New Album</h3>\n\n      </div>      \n    )\n  }\n}","import * as React from 'react'\nimport { NavLink } from 'react-router-dom';\n\nexport const Nav = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <NavLink className=\"nav-brand\" to=\"/\"> CRS-TS </NavLink>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item active\">\n            <NavLink className=\"nav-link\" to=\"/albums\"> Albums </NavLink>\n          </li>\n          {/* <li className=\"nav-item active\">\n            <NavLink className=\"nav-link\" to=\"/albums/add\"> Add Album </NavLink>\n          </li> */}\n        </ul>\n      </div>\n    </nav>\n  )\n}","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\n\nimport Hello from './Hello';\nimport Albums from './Album';\nimport AlbumDetails from './AlbumDetails';\nimport AddAlbum from './AddAlbum';\nimport { Nav } from './Nav';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className='col-md-12' style={{marginBottom : 20}}>\n          <h1> React in TypeScript</h1>\n        </div>\n        <div className='col-md-6'>\n          <Hello message=\"TypeScript Fan\"></Hello>\n        </div>\n        <div className='col-md-6'>\n          <Nav></Nav>\n          <Route exact path=\"/albums\" component={Albums} />\n          <Route path=\"/albums/add/\" component={AddAlbum} />\n          <Route path=\"/albums/:id/details\" component={AlbumDetails} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App></App>\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}